{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset204 Consolas;}{\f1\fnil Consolas;}{\f2\fnil\fcharset0 Consolas;}{\f3\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green128\blue0;\red255\green255\blue255;\red0\green0\blue0;\red128\green128\blue128;\red43\green145\blue175;\red163\green21\blue21;\red0\green0\blue255;\red0\green128\blue128;}
{\*\generator Riched20 10.0.10240}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\cf1\highlight2\f0\fs19\lang1058\'cf\'d0\'c8\'ca\'cb\'c0\'c4 \'c2\'c8\'ca\'ce\'d0\'d1\'d2\'c0\'cd\'cd\'df \'b2\'cd\'d2\'c5\'d0\'d4\'c5\'c9\'d1\'b2\'c2\f1\lang9\par

\pard\sa200\sl276\slmult1 //\f0\lang1058\'ce\'ef\'e8\'f1\'e0\'f2\'e8 \'ec\'e0\'f1\'e8\'e2, \'ff\'ea\'e8\'e9 \'e2\'ee\'eb\'ee\'e4\'b3\'ba \'ed\'e0\'f1\'f2\'f3\'ef\'ed\'e8\'ec\'e8 \'f4\'f3\'ed\'ea\'f6\'b3\'ee\'ed\'e0\'eb\'fc\'ed\'e8\'ec\'e8 \'ec\'ee\'e6\'eb\'e8\'e2\'ee\'f1\'f2\'ff\'ec\'e8\cf3\par
\cf1 //1. \'cf\'ee\'f0\'b3\'e2\'ed\'ff\'ed\'ed\'ff \'e7 \'b3\'ed\'f8\'e8\'ec \'ec\'e0\'f1\'e8\'e2\'ee\'ec \'ed\'e0 \'f0\'b3\'e2\'ed\'b3\'f1\'f2\'fc (\'ef\'ee\'f0\'b3\'e2\'ed\'ed\'ff\'ed\'ed\'ff \'e1\'f3\'e4\'e5\'ec\'ee \'e7\'e4\'b3\'e9\'f1\'ed\'fe\'e2\'e0\'f2\'e8 \'e7\'e0 \'f1\'f3\'ec\'ee\'fe \'e5\'eb\'e5\'ec\'e5\'ed\'f2\'b3\'e2)\cf3\par
\cf1 //2. \'c2\'e2\'e5\'e4\'e5\'ed\'ed\'ff \'e2\'e8\'e2\'e5\'e4\'e5\'ed\'ed\'ff\cf3\par
\cf1 //3. \'cc\'ed\'ee\'e6\'e5\'ed\'ed\'ff \'ec\'e0\'f1\'e8\'e2\'f3 \'ed\'e0 \'f7\'e8\'f1\'eb\'ee \'f2\'e0 \'e4\'ee\'e4\'e0\'e2\'e0\'ed\'ed\'ff \'e4\'ee \'e5\'eb\'e5\'ec\'e5\'ed\'f2\'b3\'e2 \'ec\'e0\'f1\'e8\'e2\'f3 \'e4\'e5\'ff\'ea\'ee\'e3\'ee \'f7\'e8\'f1\'eb\'e0\cf3\par
\cf4 //--------------------------------- \cf5\f1 IToString\f2\lang1033 .h\cf4\f0\lang1058\par
\f1 #pragma\cf3  \cf4 once\cf3\par
\cf4 #include\cf6 <string>\cf3\par
\cf7 using\cf3  \cf7 namespace\cf3  std;\par
\cf7 __interface\cf3  \cf5\f0  \cf3\f1\par
\{\par
\tab\cf5 string\cf3  toString();\par
\};\cf4\f0  \par
//---------------------------------\f2\lang1033  Project\f0\lang1058\par
#include\cf6 <iostream>\cf3\par
\cf4 #include\cf3  \cf6 "IToString.h"\cf3\par
\cf7 using\cf3  \cf7 namespace\cf3  std;\par
\cf7 __interface\cf3  \cf5 IComparable\cf3\par
\{\par
\tab\cf7 int\cf3  compareTo(\cf7 void\cf3 * obj);  \cf1 //\'ec\'e5\'f2\'ee\'e4 \'ef\'ee\'e2\'e5\'f0\'f2\'e0\'ba 0, \'ff\'ea\'f9\'ee \'ee\'e1"\'ba\'ea\'f2\'e8 \'f0\'b3\'e2\'ed\'b3, \'e1\'b3\'eb\'fc\'f8\'e5 \'e7\'e0 0, \'ff\'ea\'f9\'ee \'ef\'e5\'f0\'f8\'e8\'e9 \'ba \'e1\'b3\'eb\'fc\'f8\'e8\'ec, \'ec\'e5\'ed\'f8\'e5 \'e7\'e0 0, \'ff\'ea\'f9\'ee \'ef\'e5\'f0\'f8\'e8\'e9 \'ee\'e1"\'ba\'ea\'f2 \'ba \'ec\'e5\'ed\'f8\'e8\'ec\cf3\par
\};\par
\par
\cf7 __interface\cf3  \cf5 IInputOutput\cf3\par
\{\par
\tab\cf7 void\cf3  input();\par
\tab\cf7 void\cf3  output();\par
\};\par
\par
\cf7 __interface\cf3  \cf5 IArOper\cf3\par
\{\par
\tab\cf7 void\cf3  addNumber(\cf7 double\cf3  number);\par
\tab\cf7 void\cf3  multByNumber(\cf7 double\cf3  number);\par
\};\par
\cf1 //--------------------------\cf3\par
\cf7 class\cf3  \cf5 Array\cf3 : \cf7 public\cf3  \cf5 IComparable\cf3 , \cf7 public\cf3  \cf5 IInputOutput\cf3 , \cf7 public\cf3  \cf5 IArOper\cf3 , \cf7 public\cf3  \cf5 IToString\cf3\par
\{\par
\tab\cf7 double\cf3 * data;\par
\tab\cf7 int\cf3  length;\par
\cf7 public\cf3 :\par
\tab\cf7 void\cf3  setLength(\cf7 int\cf3  \cf4 length\cf3 )\par
\tab\{\par
\tab\tab\cf7 if\cf3  (\cf4 length\cf3  > 0)\par
\tab\tab\{\par
\tab\tab\tab data = \cf8 new d\cf7 ouble\cf3 [\cf4 length\cf3 ];\par
\tab\tab\tab\cf7 this\cf3 ->length = \cf4 length\cf3 ;\par
\tab\tab\}\par
\tab\tab\cf7 else\cf3\par
\tab\tab\tab\cf7 throw\cf3  \cf6 "bad length"\cf3 ;\par
\tab\}\par
\tab\cf7 int\cf3  getLength()\par
\tab\{\par
\tab\tab\cf7 return\cf3  length;\par
\tab\}\par
\tab\cf7 double\cf3  & getElement(\cf7 int\cf3  \cf4 index\cf3 )\par
\tab\{\par
\tab\tab\cf7 if\cf3  (\cf4 index\cf3  >= 0 && \cf4 index\cf3  < length)\par
\tab\tab\{\par
\tab\tab\tab\cf7 return\cf3  data[\cf4 index\cf3 ];\par
\tab\tab\}\par
\tab\tab\cf7 else\cf3\par
\tab\tab\tab\cf7 throw\cf3  \cf6 "index out of range"\cf3 ;\par
\tab\}\par
\tab\par
\tab Array(\cf7 int\cf3  \cf4 length\cf3 )\par
\tab\{\par
\tab\tab setLength(\cf4 length\cf3 );\par
\tab\}\par
\tab Array() :length(0), data(0)\par
\tab\{\}\par
\tab ~Array()\par
\tab\{\par
\tab\tab\cf8 delete[]\cf3  data;\par
\tab\}\par
\tab\cf1 //------------------------------------------\cf3\par
\tab\cf7 double\cf3  getSum()\par
\tab\{\par
\tab\tab\cf7 double\cf3  s = 0;\par
\tab\tab\cf7 for\cf3  (\cf7 int\cf3  i = 0; i < length; i++)\par
\tab\tab\{\par
\tab\tab\tab s += data[i];\par
\tab\tab\}\par
\tab\tab\cf7 return\cf3  s;\par
\tab\}\par
\tab\cf7 int\cf3  compareTo(\cf7 void\cf3 * \cf4 obj\cf3 )\par
\tab\{\par
\tab\tab\cf7 try\cf3  \{\par
\tab\tab\tab\cf1 /*Array* a2 = (Array*)obj;\cf3\par
\cf1\tab\tab\tab double temp = getSum() - a2->getSum();*/\cf3\par
\tab\tab\tab\par
\tab\tab\tab\cf7 double\cf3  temp = getSum() - ((\cf5 Array\cf3 *)\cf4 obj\cf3 )->getSum();\par
\tab\tab\tab\cf7 if\cf3  (abs(temp) < 0.00000001)\par
\tab\tab\tab\{\par
\tab\tab\tab\tab\cf7 return\cf3  0; \cf1 //\'c2\'e2\'e0\'e6\'e0\'ba\'f2\'fc\'f1\'ff, \'f9\'ee \'e2\'ee\'ed\'e8 \'f0\'b3\'e2\'ed\'b3\cf3\par
\tab\tab\tab\}\par
\tab\tab\tab\cf7 else\cf3\par
\tab\tab\tab\{\par
\tab\tab\tab\tab\cf7 if\cf3  (temp > 0)\par
\tab\tab\tab\tab\{\par
\tab\tab\tab\tab\tab\cf7 return\cf3\tab 1; \cf1 //\'cf\'e5\'f0\'f8\'e8\'e9 \'ee\'e1"\'ba\'ea\'f2 \'e1\'b3\'eb\'fc\'f8\'e8\'e9\cf3\par
\tab\tab\tab\tab\}\par
\tab\tab\tab\tab\cf7 else\cf3\par
\tab\tab\tab\tab\tab\cf7 return\cf3  -1;  \cf1 //\'cf\'e5\'f0\'f8\'e8\'e9 \'ee\'e1"\'ba\'ea\'f2 \'ec\'e5\'ed\'f8\'e8\'e9 \'e7\'e0 \'e4\'f0\'f3\'e3\'e8\'e9 ( \'e7\'e0 obj)\cf3\par
\tab\tab\tab\}\par
\tab\tab\}\par
\tab\tab\cf7 catch\cf3 (...)\par
\tab\tab\{\par
\tab\tab\tab cout \cf8 <<\cf3  \cf6 "cast error"\cf3 ;\par
\tab\tab\}\par
\tab\}\par
\cf1 //----------------------------------------------------------\cf3\par
\tab\cf7 void\cf3  input()\par
\tab\{\par
\tab\tab cout \cf8 <<\cf3  \cf6 "length="\cf3 ;\par
\tab\tab\cf7 int\cf3  temp ;\par
\tab\tab cin \cf8 >>\cf3  temp;\par
\tab\tab setLength(temp);\par
\tab\tab\cf7 for\cf3  (\cf7 int\cf3  i = 0; i < length; i++)\par
\tab\tab\{\par
\tab\tab\tab cout \cf8 <<\cf3  \cf6 "element "\cf3  \cf8 <<\cf3  i \cf8 <<\cf3  \cf6 " ="\cf3 ;\par
\tab\tab\tab cin \cf8 >>\cf3  data[i];\par
\tab\tab\}\par
\tab\}\par
\tab\cf7 void\cf3  output()\par
\tab\{\par
\tab\tab\cf7 for\cf3  (\cf7 int\cf3  i = 0; i < length; i++)\par
\tab\tab\{\par
\tab\tab\tab printf(\cf6 "element %d =%f \\n"\cf3 ,i,data[i]);\tab\tab\tab\tab\par
\tab\tab\}\par
\tab\}\par
\tab\cf1 //---------------------------------\cf3\par
\tab\cf7 void\cf3  addNumber(\cf7 double\cf3  \cf4 number\cf3 )\par
\tab\{\par
\tab\tab\cf7 if\cf3  (length==0)\par
\tab\tab\{\par
\tab\tab\tab\cf7 throw\cf3  \cf6 "array is empty"\cf3 ;\par
\tab\tab\}\par
\tab\tab\cf7 for\cf3  (\cf7 int\cf3  i = 0; i < length; i++)\par
\tab\tab\{\par
\tab\tab\tab data[i] += \cf4 number\cf3 ;\par
\tab\tab\}\par
\tab\}\par
\tab\cf7 void\cf3  multByNumber(\cf7 double\cf3  \cf4 number\cf3 )\par
\tab\{\par
\tab\tab\cf7 if\cf3  (length == 0)\par
\tab\tab\{\par
\tab\tab\tab\cf7 throw\cf3  \cf6 "array is empty"\cf3 ;\par
\tab\tab\}\par
\tab\tab\cf7 for\cf3  (\cf7 int\cf3  i = 0; i < length; i++)\par
\tab\tab\{\par
\tab\tab\tab data[i] *= \cf4 number\cf3 ;\par
\tab\tab\}\par
\tab\}\par
\tab\cf1 //---------------------------\cf3\par
\tab\cf5 string\cf3  toString()\par
\tab\{\par
\tab\tab\cf5 string\cf3  temp=\cf6 ""\cf3 ;\par
\tab\tab\cf7 for\cf3  (\cf7 int\cf3  i = 0; i < length; i++)\par
\tab\tab\{\par
\tab\tab\tab temp \cf8 +=\cf3  to_string(data[i]) \cf8 +\cf3  \cf6 " - "\cf3 ;\par
\tab\tab\}\par
\tab\tab\cf7 return\cf3  temp;\par
\tab\}\par
\};\par
\cf7 class\cf3  \cf5 OrderedArray\cf3 : \cf7 public\cf3  \cf5 Array\cf3\par
\{\par
\par
\};\par
\par
\cf1 //-------------------\cf3\par
\cf7 void\cf3  show(\cf5 IInputOutput\cf3  * \cf4 f\cf3 )\par
\{\par
\tab\cf4 f\cf3 ->output();\par
\}\par
\cf7 void\cf3  showString(\cf5 IToString\cf3 * \cf4 p\cf3 )\par
\{\par
\tab cout\cf8 <<\cf4 p\cf3 ->toString() \cf8 <<\cf3 endl;\par
\}\par
\cf7 void\cf3  main()\par
\{\par
\tab\cf5 Array\cf3  a1;\par
\tab a1.input();\par
\tab\cf5 Array\cf3  a2;\par
\tab a2.input();\par
\tab\cf7 if\cf3  (a1.compareTo(&a2) > 0)\par
\tab\tab cout \cf8 <<\cf3  \cf6 "Pershij bilshij \\n"\cf3 ;\par
\tab showString( &a1);\par
\tab system(\cf6 "pause"\cf3 );\par
\}\cf0\highlight0\f3\fs22\lang9\par
}
 